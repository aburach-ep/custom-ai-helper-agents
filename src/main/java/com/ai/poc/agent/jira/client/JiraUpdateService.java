package com.ai.poc.agent.jira.client;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;
import lombok.RequiredArgsConstructor;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.*;
import org.springframework.stereotype.Component;
import org.springframework.web.client.RestTemplate;

@Component
@RequiredArgsConstructor
// Note: this class was generated by Cursor IDE (initially named as McpJiraClient), and then minorly refactored
public class JiraUpdateService {
    
    private static final Logger log = LoggerFactory.getLogger(JiraUpdateService.class);
    private static final String JIRA_REST_API_ENDPOINT = "/rest/api/2/issue/";

    private final RestTemplate restTemplate = new RestTemplate();;
    private final ObjectMapper objectMapper = new ObjectMapper();

    @Value("${jira.base-url:https://jiraeu.epam.com}")
    private String jiraBaseUrl;

    @Value("${jira.username}")
    private String username;

    @Value("${jira.api-token}")
    private String apiToken;

    public void addCommentToTicket(String ticketKey, String comment) {
        try {
            String url = jiraBaseUrl + JIRA_REST_API_ENDPOINT + ticketKey + "/comment";
            
            ObjectNode commentPayload = objectMapper.createObjectNode();
            commentPayload.put("body", comment);

            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.APPLICATION_JSON);
            headers.setBasicAuth(username, apiToken);

            HttpEntity<String> requestEntity = new HttpEntity<>(commentPayload.toString(), headers);

            ResponseEntity<String> response = restTemplate.exchange(
                url,
                HttpMethod.POST,
                requestEntity,
                String.class
            );

            if (response.getStatusCode().is2xxSuccessful()) {
                log.info("Successfully added comment to ticket {}", jiraBaseUrl + "/browse/" + ticketKey);
            } else {
                log.error("Failed to add comment to ticket {}. Status: {}", ticketKey, response.getStatusCode());
            }

        } catch (Exception e) {
            log.error("Error adding comment to ticket {}", ticketKey, e);
        }
    }

    public void updateTicketWithQuestions(String ticketKey, String potentialQuestions) {
        try {
            String url = jiraBaseUrl + JIRA_REST_API_ENDPOINT + ticketKey;

            // Create the update payload
            ObjectNode updatePayload = objectMapper.createObjectNode();
            ObjectNode fields = objectMapper.createObjectNode();

            // Add the potential questions to the description or a custom field
            // For now, we'll append to the description
            String updatedDescription = "Potential Questions from AI Analysis:\n" + potentialQuestions;
            fields.put("description", updatedDescription);

            updatePayload.set("fields", fields);

            // Set up headers with basic auth
            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.APPLICATION_JSON);
            headers.setBasicAuth(username, apiToken);

            HttpEntity<String> requestEntity = new HttpEntity<>(updatePayload.toString(), headers);

            ResponseEntity<String> response = restTemplate.exchange(
                    url,
                    HttpMethod.PUT,
                    requestEntity,
                    String.class
            );

            if (response.getStatusCode().is2xxSuccessful()) {
                log.info("Successfully updated ticket {} with potential questions", ticketKey);
            } else {
                log.error("Failed to update ticket {}. Status: {}", ticketKey, response.getStatusCode());
            }
        } catch (Exception e) {
            log.error("Error updating ticket {} with potential questions", ticketKey, e);
        }
    }

} 