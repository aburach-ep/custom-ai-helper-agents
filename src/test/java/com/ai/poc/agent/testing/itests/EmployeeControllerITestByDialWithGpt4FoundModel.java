package com.ai.poc.agent.testing.itests;

import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.*;


/**
 * This Integration test was generated by OpenAI's GPT-4 model using the "gpt-4" Foundation Model.
 * DIAL correctly listed the exposed REST API, it's generated tests covered majorly happy paths,
 * 3 of them were failing.
 */
public class EmployeeControllerITestByDialWithGpt4FoundModel {

    // Base URL of the API
    private static final String BASE_URL = "http://100.64.22.178:8080/api/employees/";

    @BeforeEach
    public void setup() {
        // Set up the base URI for REST-assured
        RestAssured.baseURI = BASE_URL;
    }

    /**
     * Test to fetch all employees.
     * Validates that the response contains a valid JSON and is not empty.
     */
    @Test
    public void testGetAllEmployees() {
        given()
                .when()
                .get()
                .then()
                .statusCode(200) // Ensure HTTP 200 status code
                .contentType(ContentType.JSON) // Ensure response type is JSON
                .body("$", not(empty())); // Ensure response is not empty
    }

    /**
     * Test to fetch a single employee by ID.
     */
    @Test
    public void testGetEmployeeById() {
        int employeeId = 1; // Replace with a valid ID from your API

        given()
                .when()
                .get(String.valueOf(employeeId))
                .then()
                .statusCode(200) // Ensure it returns HTTP 200 (OK)
                .contentType(ContentType.JSON) // Response must be JSON
                .body("id", equalTo(employeeId)); // Validate matching ID in response
    }

    /**
     * Test to add a new employee to the database.
     */
    @Test
    public void testAddNewEmployee() {
        String requestBody = """
                {
                    "name": "John Doe",
                    "age": 32,
                    "designation": "Software Engineer"
                }
                """;

        given()
                .contentType(ContentType.JSON) // Set Content-Type in the header
                .body(requestBody) // Attach the POST body
                .when()
                .post()
                .then()
                .statusCode(201) // Ensure HTTP 201 Created
                .contentType(ContentType.JSON) // Response should be JSON
                .body("name", equalTo("John Doe")) // Validate name in response
                .body("age", equalTo(32)) // Validate age in response
                .body("designation", equalTo("Software Engineer")); // Validate designation
    }

    /**
     * Test to update an existing employee by ID.
     */
    @Test
    public void testUpdateEmployee() {
        int employeeId = 1; // Replace with a valid employee ID

        String updateRequestBody = """
                {
                    "name": "Jane Smith",
                    "age": 28,
                    "designation": "Senior Developer"
                }
                """;

        given()
                .contentType(ContentType.JSON)
                .body(updateRequestBody)
                .when()
                .put(String.valueOf(employeeId)) // Use PUT to update
                .then()
                .statusCode(200) // Expect HTTP 200 OK
                .contentType(ContentType.JSON)
                .body("name", equalTo("Jane Smith")) // Validate updated name
                .body("age", equalTo(28)) // Validate updated age
                .body("designation", equalTo("Senior Developer")); // Validate updated designation
    }

    /**
     * Test to delete an employee by ID.
     */
    @Test
    public void testDeleteEmployee() {
        int employeeId = 2; // Replace with an existing employee ID for deletion

        given()
                .when()
                .delete(String.valueOf(employeeId))
                .then()
                .statusCode(204); // Ensure HTTP 204 No Content for successful deletion
    }

    /**
     * Test to fetch a non-existent employee.
     * Expects HTTP 404 Not Found.
     */
    @Test
    public void testGetNonExistentEmployee() {
        int nonExistentEmployeeId = 99999;

        given()
                .when()
                .get(String.valueOf(nonExistentEmployeeId))
                .then()
                .statusCode(404); // Expects 404 Not Found
    }

}
