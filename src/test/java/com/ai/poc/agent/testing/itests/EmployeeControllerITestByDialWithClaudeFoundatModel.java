package com.ai.poc.agent.testing.itests;

import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import org.junit.jupiter.api.*;
import org.junit.jupiter.api.MethodOrderer.OrderAnnotation;

import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.*;

/**
 * This Integration test was generated by OpenAI's Claude model using the "claude-2" Foundation Model via DIAL.
 * This test quality appeared slightly worse than the one generated by GPT-4, because:
 * - Employee POJO fields  didn't match the actual ones, so 90% of tests were failing.
 * - Claude generated 8 tests, which covered basic paths and even few core cases,
 * like: handlingInvalidEmployeeData;  handlingInvalidEmailFormat; return404ForNonExistentEmployee.
 */
@TestMethodOrder(OrderAnnotation.class)
public class EmployeeControllerITestByDialWithClaudeFoundatModel {

    private static final String BASE_URL = "http://100.64.22.178:8080/api/employees/";
    private static Integer createdEmployeeId;

    @BeforeAll
    public static void setup() {
        RestAssured.baseURI = BASE_URL;
    }

    @Test
    @Order(1)
    @DisplayName("Should get all employees")
    public void testGetAllEmployees() {
        given()
                .when()
                .get()
                .then()
                .statusCode(200)
                .contentType(ContentType.JSON)
                .body("$", not(empty()));
    }

    @Test
    @Order(2)
    @DisplayName("Should create a new employee")
    public void testCreateEmployee() {
        String requestBody = """
                {
                    "firstName": "John",
                    "lastName": "Doe",
                    "email": "john.doe@example.com"
                }
                """;

        Response response = given()
                .contentType(ContentType.JSON)
                .body(requestBody)
                .when()
                .post()
                .then()
                .statusCode(201)
                .contentType(ContentType.JSON)
                .body("firstName", equalTo("John"))
                .body("lastName", equalTo("Doe"))
                .body("email", equalTo("john.doe@example.com"))
                .body("id", notNullValue())
                .extract().response();

        // Store the created employee ID for later tests
        createdEmployeeId = response.jsonPath().getInt("id");
    }

    @Test
    @Order(3)
    @DisplayName("Should get employee by ID")
    public void testGetEmployeeById() {
        Assumptions.assumeTrue(createdEmployeeId != null, "Employee must be created first");

        given()
                .when()
                .get("{id}", createdEmployeeId)
                .then()
                .statusCode(200)
                .contentType(ContentType.JSON)
                .body("id", equalTo(createdEmployeeId))
                .body("firstName", equalTo("John"))
                .body("lastName", equalTo("Doe"))
                .body("email", equalTo("john.doe@example.com"));
    }

    @Test
    @Order(4)
    @DisplayName("Should update employee")
    public void testUpdateEmployee() {
        Assumptions.assumeTrue(createdEmployeeId != null, "Employee must be created first");

        String updateBody = """
                {
                    "firstName": "John",
                    "lastName": "Smith",
                    "email": "john.smith@example.com"
                }
                """;

        given()
                .contentType(ContentType.JSON)
                .body(updateBody)
                .when()
                .put("{id}", createdEmployeeId)
                .then()
                .statusCode(200)
                .contentType(ContentType.JSON)
                .body("id", equalTo(createdEmployeeId))
                .body("firstName", equalTo("John"))
                .body("lastName", equalTo("Smith"))
                .body("email", equalTo("john.smith@example.com"));
    }

    @Test
    @Order(5)
    @DisplayName("Should delete employee")
    public void testDeleteEmployee() {
        Assumptions.assumeTrue(createdEmployeeId != null, "Employee must be created first");

        given()
                .when()
                .delete("{id}", createdEmployeeId)
                .then()
                .statusCode(204);

        // Verify the employee no longer exists
        given()
                .when()
                .get("{id}", createdEmployeeId)
                .then()
                .statusCode(404);
    }

    @Test
    @Order(6)
    @DisplayName("Should return 404 for non-existent employee")
    public void testGetNonExistentEmployee() {
        given()
                .when()
                .get("{id}", 99999)
                .then()
                .statusCode(404);
    }

    @Test
    @Order(7)
    @DisplayName("Should handle invalid employee data")
    public void testCreateInvalidEmployee() {
        String invalidRequestBody = """
                {
                    "firstName": "",
                    "lastName": "",
                    "email": "invalid-email"
                }
                """;

        given()
                .contentType(ContentType.JSON)
                .body(invalidRequestBody)
                .when()
                .post()
                .then()
                .statusCode(400); // Bad Request
    }

    @Test
    @Order(8)
    @DisplayName("Should handle invalid email format")
    public void testCreateEmployeeWithInvalidEmail() {
        String requestBody = """
                {
                    "firstName": "Jane",
                    "lastName": "Doe",
                    "email": "not-an-email"
                }
                """;

        given()
                .contentType(ContentType.JSON)
                .body(requestBody)
                .when()
                .post()
                .then()
                .statusCode(400); // Bad Request
    }
}